{"version":3,"file":"useSQLiteDevTools.js","sourceRoot":"","sources":["../src/useSQLiteDevTools.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAA0B,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,MAAM,UAAU,iBAAiB,CAAC,EAAyB;IACzD,MAAM,MAAM,GAAG,uBAAuB,CAAC,sBAAsB,CAAC,CAAC;IAE/D,MAAM,YAAY,GAAG,KAAK,EAAE,CAK3B,EAAE,EAAE;QACH,IAAI,CAAC,EAAE;YAAE,OAAO;QAChB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,QAAQ,CAAC;YACb,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;gBAChB,QAAQ,GAAG,MAAM,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAChE,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YACpD,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC1C,MAAM,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;IACH,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,aAAa,GAAsC,EAAE,CAAC;QAE5D,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;QAExE,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;gBACzC,YAAY,EAAE,MAAM,EAAE,CAAC;YACzB,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AACnB,CAAC","sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport { useDevToolsPluginClient, type EventSubscription } from \"expo/devtools\";\nimport { useEffect } from \"react\";\n\nexport function useSQLiteDevTools(db: SQLite.SQLiteDatabase) {\n  const client = useDevToolsPluginClient(\"expo-sqlite-devtools\");\n\n  const transferData = async (e: {\n    sql: string;\n    params: (string | number)[];\n    arrayMode: boolean;\n    id: string;\n  }) => {\n    if (!db) return;\n    try {\n      const statement = await db.prepareAsync(e.sql);\n      let executed;\n      if (e.arrayMode) {\n        executed = await statement.executeForRawResultAsync(e.params);\n      } else {\n        executed = await statement.executeAsync(e.params);\n      }\n\n      const data = await executed.getAllAsync();\n      client?.sendMessage(`transferData-${e.id}`, data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    const subscriptions: (EventSubscription | undefined)[] = [];\n\n    subscriptions.push(client?.addMessageListener(\"getData\", transferData));\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client, db]);\n}\n"]}